
抛出实际问题.
在游戏中,经常会有百分比随机的判断.比如说命中率20%.暴击率40%.在我前些年工作的一个MMO RPG项目中.在随机数这里就碰到一些问题.
在一次内部测试中 A角色30%暴击率 B角色20%暴击率. 在其他属性接近的情况下 结果B角色半血干掉A角色.于是我们好奇地翻看了PK日志.
发现在攻击次数接近的情况下.B角色暴击次数大约是A的两倍.我们细致地检查了一下代码.发现底层调用的是rand_r函数.man rand_r查看
一下.
           static unsigned long next = 1;

           /* RAND_MAX assumed to be 32767 */
           int myrand(void) {
               next = next * 1103515245 + 12345;
               return((unsigned)(next/65536) % 32768);
           }

           void mysrand(unsigned int seed) {
               next = seed;
           }
 可以看到随机只是公式数学上的随机..我们可以简单写个例子代码测试10w次30%的随机值,
 然后统计连续6次不触发的概率.统计连续触发大于3次的概率.可以发现这样的概率都不低.(我很懒,这个自己写不出来就不用看下面的东西了)
 很简单可以理解.这个公式呢是在一定测试基础量之上才能有稳定的效果.但是他并不能保证在有限采集量的时候的概率的准确度.于是上面的pk过程
 就很好理解了.B 20%概率有多次连续触发.A却刚好比较倒霉. 虽然公式可以理解.但是这并不是游戏需要的结果.于是我们就着手了随机数的优化.
 
于是就有了本章的标题 伪随机数.
 
 
